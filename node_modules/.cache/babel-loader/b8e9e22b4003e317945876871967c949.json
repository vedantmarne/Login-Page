{"ast":null,"code":"import url from \"url\"; // We handle legacy API that is Node.js specific, and a newer API that implements the same WHATWG URL Standard used by web browsers\n// Please look at https://nodejs.org/api/url.html#url_url_strings_and_url_objects\n\nfunction createSocketURL(parsedURL) {\n  var hostname = parsedURL.hostname; // Node.js module parses it as `::`\n  // `new URL(urlString, [baseURLstring])` parses it as '[::]'\n\n  var isInAddrAny = hostname === \"0.0.0.0\" || hostname === \"::\" || hostname === \"[::]\"; // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n\n  if (isInAddrAny && self.location.hostname && self.location.protocol.indexOf(\"http\") === 0) {\n    hostname = self.location.hostname;\n  }\n\n  var socketURLProtocol = parsedURL.protocol || self.location.protocol; // When https is used in the app, secure web sockets are always necessary because the browser doesn't accept non-secure web sockets.\n\n  if (socketURLProtocol === \"auto:\" || hostname && isInAddrAny && self.location.protocol === \"https:\") {\n    socketURLProtocol = self.location.protocol;\n  }\n\n  socketURLProtocol = socketURLProtocol.replace(/^(?:http|.+-extension|file)/i, \"ws\");\n  var socketURLAuth = \"\"; // `new URL(urlString, [baseURLstring])` doesn't have `auth` property\n  // Parse authentication credentials in case we need them\n\n  if (parsedURL.username) {\n    socketURLAuth = parsedURL.username; // Since HTTP basic authentication does not allow empty username,\n    // we only include password if the username is not empty.\n\n    if (parsedURL.password) {\n      // Result: <username>:<password>\n      socketURLAuth = socketURLAuth.concat(\":\", parsedURL.password);\n    }\n  } // In case the host is a raw IPv6 address, it can be enclosed in\n  // the brackets as the brackets are needed in the final URL string.\n  // Need to remove those as url.format blindly adds its own set of brackets\n  // if the host string contains colons. That would lead to non-working\n  // double brackets (e.g. [[::]]) host\n  //\n  // All of these web socket url params are optionally passed in through resourceQuery,\n  // so we need to fall back to the default if they are not provided\n\n\n  var socketURLHostname = (hostname || self.location.hostname || \"localhost\").replace(/^\\[(.*)\\]$/, \"$1\");\n  var socketURLPort = parsedURL.port;\n\n  if (!socketURLPort || socketURLPort === \"0\") {\n    socketURLPort = self.location.port;\n  } // If path is provided it'll be passed in via the resourceQuery as a\n  // query param so it has to be parsed out of the querystring in order for the\n  // client to open the socket to the correct location.\n\n\n  var socketURLPathname = \"/ws\";\n\n  if (parsedURL.pathname && !parsedURL.fromCurrentScript) {\n    socketURLPathname = parsedURL.pathname;\n  }\n\n  return url.format({\n    protocol: socketURLProtocol,\n    auth: socketURLAuth,\n    hostname: socketURLHostname,\n    port: socketURLPort,\n    pathname: socketURLPathname,\n    slashes: true\n  });\n}\n\nexport default createSocketURL;","map":{"version":3,"names":["url","createSocketURL","parsedURL","hostname","isInAddrAny","self","location","protocol","indexOf","socketURLProtocol","replace","socketURLAuth","username","password","concat","socketURLHostname","socketURLPort","port","socketURLPathname","pathname","fromCurrentScript","format","auth","slashes"],"sources":["E:/test projects/testpro/my-cart-ui (1)/node_modules/webpack-dev-server/client/utils/createSocketURL.js"],"sourcesContent":["import url from \"url\"; // We handle legacy API that is Node.js specific, and a newer API that implements the same WHATWG URL Standard used by web browsers\n// Please look at https://nodejs.org/api/url.html#url_url_strings_and_url_objects\n\nfunction createSocketURL(parsedURL) {\n  var hostname = parsedURL.hostname; // Node.js module parses it as `::`\n  // `new URL(urlString, [baseURLstring])` parses it as '[::]'\n\n  var isInAddrAny = hostname === \"0.0.0.0\" || hostname === \"::\" || hostname === \"[::]\"; // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n\n  if (isInAddrAny && self.location.hostname && self.location.protocol.indexOf(\"http\") === 0) {\n    hostname = self.location.hostname;\n  }\n\n  var socketURLProtocol = parsedURL.protocol || self.location.protocol; // When https is used in the app, secure web sockets are always necessary because the browser doesn't accept non-secure web sockets.\n\n  if (socketURLProtocol === \"auto:\" || hostname && isInAddrAny && self.location.protocol === \"https:\") {\n    socketURLProtocol = self.location.protocol;\n  }\n\n  socketURLProtocol = socketURLProtocol.replace(/^(?:http|.+-extension|file)/i, \"ws\");\n  var socketURLAuth = \"\"; // `new URL(urlString, [baseURLstring])` doesn't have `auth` property\n  // Parse authentication credentials in case we need them\n\n  if (parsedURL.username) {\n    socketURLAuth = parsedURL.username; // Since HTTP basic authentication does not allow empty username,\n    // we only include password if the username is not empty.\n\n    if (parsedURL.password) {\n      // Result: <username>:<password>\n      socketURLAuth = socketURLAuth.concat(\":\", parsedURL.password);\n    }\n  } // In case the host is a raw IPv6 address, it can be enclosed in\n  // the brackets as the brackets are needed in the final URL string.\n  // Need to remove those as url.format blindly adds its own set of brackets\n  // if the host string contains colons. That would lead to non-working\n  // double brackets (e.g. [[::]]) host\n  //\n  // All of these web socket url params are optionally passed in through resourceQuery,\n  // so we need to fall back to the default if they are not provided\n\n\n  var socketURLHostname = (hostname || self.location.hostname || \"localhost\").replace(/^\\[(.*)\\]$/, \"$1\");\n  var socketURLPort = parsedURL.port;\n\n  if (!socketURLPort || socketURLPort === \"0\") {\n    socketURLPort = self.location.port;\n  } // If path is provided it'll be passed in via the resourceQuery as a\n  // query param so it has to be parsed out of the querystring in order for the\n  // client to open the socket to the correct location.\n\n\n  var socketURLPathname = \"/ws\";\n\n  if (parsedURL.pathname && !parsedURL.fromCurrentScript) {\n    socketURLPathname = parsedURL.pathname;\n  }\n\n  return url.format({\n    protocol: socketURLProtocol,\n    auth: socketURLAuth,\n    hostname: socketURLHostname,\n    port: socketURLPort,\n    pathname: socketURLPathname,\n    slashes: true\n  });\n}\n\nexport default createSocketURL;"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,KAAhB,C,CAAuB;AACvB;;AAEA,SAASC,eAAT,CAAyBC,SAAzB,EAAoC;EAClC,IAAIC,QAAQ,GAAGD,SAAS,CAACC,QAAzB,CADkC,CACC;EACnC;;EAEA,IAAIC,WAAW,GAAGD,QAAQ,KAAK,SAAb,IAA0BA,QAAQ,KAAK,IAAvC,IAA+CA,QAAQ,KAAK,MAA9E,CAJkC,CAIoD;EACtF;EACA;;EAEA,IAAIC,WAAW,IAAIC,IAAI,CAACC,QAAL,CAAcH,QAA7B,IAAyCE,IAAI,CAACC,QAAL,CAAcC,QAAd,CAAuBC,OAAvB,CAA+B,MAA/B,MAA2C,CAAxF,EAA2F;IACzFL,QAAQ,GAAGE,IAAI,CAACC,QAAL,CAAcH,QAAzB;EACD;;EAED,IAAIM,iBAAiB,GAAGP,SAAS,CAACK,QAAV,IAAsBF,IAAI,CAACC,QAAL,CAAcC,QAA5D,CAZkC,CAYoC;;EAEtE,IAAIE,iBAAiB,KAAK,OAAtB,IAAiCN,QAAQ,IAAIC,WAAZ,IAA2BC,IAAI,CAACC,QAAL,CAAcC,QAAd,KAA2B,QAA3F,EAAqG;IACnGE,iBAAiB,GAAGJ,IAAI,CAACC,QAAL,CAAcC,QAAlC;EACD;;EAEDE,iBAAiB,GAAGA,iBAAiB,CAACC,OAAlB,CAA0B,8BAA1B,EAA0D,IAA1D,CAApB;EACA,IAAIC,aAAa,GAAG,EAApB,CAnBkC,CAmBV;EACxB;;EAEA,IAAIT,SAAS,CAACU,QAAd,EAAwB;IACtBD,aAAa,GAAGT,SAAS,CAACU,QAA1B,CADsB,CACc;IACpC;;IAEA,IAAIV,SAAS,CAACW,QAAd,EAAwB;MACtB;MACAF,aAAa,GAAGA,aAAa,CAACG,MAAd,CAAqB,GAArB,EAA0BZ,SAAS,CAACW,QAApC,CAAhB;IACD;EACF,CA9BiC,CA8BhC;EACF;EACA;EACA;EACA;EACA;EACA;EACA;;;EAGA,IAAIE,iBAAiB,GAAG,CAACZ,QAAQ,IAAIE,IAAI,CAACC,QAAL,CAAcH,QAA1B,IAAsC,WAAvC,EAAoDO,OAApD,CAA4D,YAA5D,EAA0E,IAA1E,CAAxB;EACA,IAAIM,aAAa,GAAGd,SAAS,CAACe,IAA9B;;EAEA,IAAI,CAACD,aAAD,IAAkBA,aAAa,KAAK,GAAxC,EAA6C;IAC3CA,aAAa,GAAGX,IAAI,CAACC,QAAL,CAAcW,IAA9B;EACD,CA7CiC,CA6ChC;EACF;EACA;;;EAGA,IAAIC,iBAAiB,GAAG,KAAxB;;EAEA,IAAIhB,SAAS,CAACiB,QAAV,IAAsB,CAACjB,SAAS,CAACkB,iBAArC,EAAwD;IACtDF,iBAAiB,GAAGhB,SAAS,CAACiB,QAA9B;EACD;;EAED,OAAOnB,GAAG,CAACqB,MAAJ,CAAW;IAChBd,QAAQ,EAAEE,iBADM;IAEhBa,IAAI,EAAEX,aAFU;IAGhBR,QAAQ,EAAEY,iBAHM;IAIhBE,IAAI,EAAED,aAJU;IAKhBG,QAAQ,EAAED,iBALM;IAMhBK,OAAO,EAAE;EANO,CAAX,CAAP;AAQD;;AAED,eAAetB,eAAf"},"metadata":{},"sourceType":"module"}